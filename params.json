{"name":"pyBAST","body":"***************************************\r\n pyBAST: Bayesian Astrometry in Python\r\n***************************************\r\n\r\nDate: May 22, 2012<br/>\r\nVersion: 0.3<br/>\r\nAuthors: Berian James, Josh Bloom<br/>\r\nCopyright: This document has been placed in the public domain.<br/>\r\nLicense: This code is released under the MIT license.\r\n\r\n===========================\r\npyBAST: Bayesian Astrometry\r\n===========================\r\n\r\npyBAST is a Python implementation of the Bayesian Astrometry \r\nframework. It provides a module for handling probability\r\ndistributions that represent astronomical objects and for \r\nanalysing the changes to these distributions between images.\r\n\r\nUsing pyBAST\r\n============\r\n\r\nInteractive use\r\n---------------\r\n\r\nTypical interactive use might look like:\r\n\r\n    >>> import pyBA\r\n    >>> data = np.loadtxt('examples/astrom_match_stats')\r\n    >>> nties = len(data)\r\n\r\n    # Load array data into objects\r\n    >>> objectsA = np.array([pyBA.Bivarg(mu=data[i,0:2], sigma=data[i,2:5]) \r\n                             for i in range(nties)])\r\n    >>>\tobjectsB = np.array([pyBA.Bivarg(mu=data[i,5:7], sigma=data[i,7:10]) \r\n                             for i in range(nties)])\r\n\r\n    # Select random subset of objects (speeds up testing)\r\n    >>> nsamp = 100\r\n    >>> ix = np.random.permutation(nties)[:nsamp]\r\n\r\n    # Compute background mapping\r\n    >>> from pyBA.background import distance\r\n    >>> S = pyBA.background.suggest_mapping(objectsA,objectsB)\r\n    >>> P = pyBA.background.MAP(objectsA[ix], objectsB[ix], mu0=S.mu, \r\n                                prior=pyBA.Bgmap(), norm_approx=True)\r\n\r\n    # Create astrometric mapping and condition the local distortions\r\n    >>> D = pyBA.Amap(P,objectsA[ix], objectsB[ix])\r\n    >>> D.condition()\r\n\r\n    # Plot regression onto regular grid\r\n    >>> D.draw_realisation(res=nres)\r\n\r\nThis functionality is provided in an example script (``pyBAST_example.py``) and also, with detailed comments, in an iPython notebook (``pyBAST_example.ipynb``; also in ``pyBAST_example.pdf``).\r\n\r\nCommand-line utility\r\n--------------------\r\n\r\nFor non-interactive use, a command utility ``pyBAST`` is provided:\r\n\r\n    > ./pyBAST -h \r\n    usage: pyBAST [-h] {fit,summary,apply} ...\r\n\r\n    Perform probabilistic astrometry with pyBA.\r\n\r\n    positional arguments:\r\n       {fit,summary,apply}  pyBA command option: should be 'fit', 'summary' or\r\n                            'apply'\r\n         fit                determine astrometric mapping solution\r\n         summary            summarize astrometric mapping solution\r\n         apply              apply astrometric mapping solution at new locations\r\n\r\n    optional arguments:\r\n      -h, --help           show this help message and exit\r\n\r\nThis provides the functionality to fit an astrometric solution (which is written compactly to disk), summarize that solution and then apply it to arbitrary locations:\r\n\r\n    > ./pyBAST fit -h\r\n    usage: pyBAST fit [-h] [-s N] [-r n] file [output]\r\n\r\n    Determine astrometric mapping solution\r\n\r\n    positional arguments:\r\n       file                 Path to input data file\r\n       output               Optional[=file.pyBA] path to save output pyBA solution.\r\n\r\n    optional arguments:\r\n     -h, --help           show this help message and exit\r\n     -s N, --subsample N  Use only N random objects from data set\r\n     -r n, --reject n     Excludes objects with > n sigma residuals\r\n\r\n    > ./pyBAST summary -h\r\n    usage: pyBAST summary [-h] [-p] file\r\n\r\n    Summarize astrometric mapping solution\r\n\r\n    positional arguments:\r\n      file        Path to astrometric mapping file\r\n\r\n    optional arguments:\r\n      -h, --help  show this help message and exit\r\n      -p, --plot  Plot astrometric map on grid.\r\n\r\n    > ./pyBAST apply -h  \r\n    usage: pyBAST apply [-h] [-xy x y] [-g res] file [batchfile]\r\n\r\n    positional arguments:\r\n      file                Path to astrometric mapping file\r\n      batchfile           Optional path to file with list of coordinates\r\n\r\n    optional arguments:\r\n      -h, --help          show this help message and exit\r\n      -xy x y             Map coordinate pair (x,y)\r\n      -g res, --grid res  Map grid of coordinates with density res\r\n\r\nWhat can Bayesian Astrometry in pyBAST do?\r\n==========================================\r\n\r\npyBAST provides:\r\n\r\n* Classes for respresenting astronomical objects\r\n  and astrometric mappings as probability distributions\r\n\r\n* Maximum likelihood and multivariate normal likelihood\r\n  approximation routines with these objects.\r\n\r\n* A full *non-parametric* astrometic analysis of local distortions using gaussian processes\r\n\r\n* MCMC likelihood computation (using emcee)\r\n\r\n* A helpful set of examples\r\n\r\nIt aspires to (but does not yet) provide:\r\n  \r\n* An interface with wcslib and pyfits\r\n\r\n* Handling of priors on object proper motions, parallax\r\n\r\n* Robust support for parallel computation on cluster (though n.b. that native threading via BLAS will occur by default)\r\n\r\nSee the TODO and ROADMAP documents for short- and long-term\r\ntargets, respectively.\r\n\r\nThanks\r\n======\r\n\r\nThis work was funded by NSF grant #0941742. The following people contributed to the development of this package: Adam Miller, Henrik Brink, Joey Richards, Dan Starr.","tagline":"Python implementation of Bayesian Astrometry framework","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}